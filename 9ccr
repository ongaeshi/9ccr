#! /usr/bin/env ruby

require 'strscan'

TK_RESERVED = 0
TK_NUM = 1
TK_EOF = 2

Token = Struct.new(:kind, :next, :val, :str, :pos)

@user_input = nil
@token = nil

def error(msg)
  STDERR.puts msg
  exit(1)
end

def error_at(msg, pos)
  STDERR.puts @user_input
  STDERR.puts " " * pos + "^ " 
  STDERR.puts msg
  exit(1)
end

def consume(op)
  if @token.kind != TK_RESERVED || @token.str[0] != op
    return false
  end
  @token = @token.next
  true
end

def expect(op)
  if @token.kind != TK_RESERVED || @token.str[0] != op
    error_at("expected '#{op}'", @token.pos)
  end
  @token = @token.next
end

def expect_number
  error_at("expected a number", @token.pos) if @token.kind != TK_NUM
  val = @token.val
  @token = @token.next
  val
end

def at_eof
  @token.kind == TK_EOF
end

def new_token(kind, cur, str, pos)
  tok = Token.new
  tok.kind = kind
  tok.str = str
  tok.pos = pos
  cur.next = tok
  tok
end

def tokenize(str)
  s = StringScanner.new(str)

  head = Token.new
  head.next = nil
  cur = head

  until s.eos? do
    next if s.scan(/\s+/)

    if s.scan(/\+|\-/)
      cur = new_token(TK_RESERVED, cur, s[0], s.pos - s.matched_size)
      next
    end

    if s.scan(/[0-9]+/)
       cur = new_token(TK_NUM, cur, s[0], s.pos - s.matched_size)
       cur.val = s[0].to_i
       next
    end

    error_at("invalid token", s.pos)
  end

  new_token(TK_EOF, cur, "", s.pos)
  head.next
end

if ARGV.length != 1
  error("#{ARGV.length}: invalid number of arguments")
end

@user_input = ARGV[0]
@token = tokenize(@user_input)

puts <<-EOS
.intel_syntax noprefix
.globl main
main:
  mov rax, #{expect_number}
EOS

until at_eof
  if consume("+")
    puts("  add rax, #{expect_number}")
    next
  end

  expect("-")
  puts("  sub rax, #{expect_number}")
end

puts("  ret")
